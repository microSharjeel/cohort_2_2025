module memory_buffer2 #(parameter DEPTH=8, D_WIDTH=9)(
    input logic [9:0] Reg_mem,
    input logic rst_n, write_en, clk_Fmaster,
    output logic [9:0] data_out,
    output logic empty, full
    );
    
    logic [D_WIDTH - 1:0] buff_memory [0:(DEPTH-1)];
    logic [$clog2(DEPTH):0] counter;
   
    
    integer i;
    always_ff @( posedge clk_Fmaster or negedge rst_n)
    begin
        if(!rst_n)
        begin
            counter <= 0;
//            write_counter <= 0;
            empty <= 1;
            full <= 0;
            data_out <= 0;
            for (i = 0; i < (DEPTH); i = i + 1) 
            begin
			     buff_memory[i] <= 0;
			end
			   
        end else
        begin
            if(write_en && (!full))
            begin
                buff_memory[counter] <= Reg_mem;
                counter <= counter + 1;
                empty <= 0;
                
                if(counter == (DEPTH-1))
                begin
                    full <= 1;
                end
                else 
                begin
                    full <= 0;
                end
                
            end
            else
            begin 
                
//                if(!empty)
//                begin
//                    data_out <= buff_memory[counter];
//                    full <= 0;
//                    if(counter == 0)
//                    begin
//                        empty <= 1;
//                    end
//                    counter = counter - 1;
//                end
                if (!empty) begin
    counter <= counter - 1;
    data_out <= buff_memory[counter - 1];

    if (counter == 1)
        empty <= 1;

    full <= 0;
end


            end
        end
    end
    
endmodule
